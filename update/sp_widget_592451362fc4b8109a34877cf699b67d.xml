<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[/* original code
api.controller=function() {
  //widget controller
  var c = this;
};
*/
function ($rootScope, $scope) {
	//widget controller
	var c = this;
	c.selectItem = function (idx) {
		var id = c.data.notes[idx].sys_id;
		//Log the NoteID (sys_id) of the selected record
		console.log('Note ID: ' + id);
		//Store the seleceted records sys_id in the noteID for rootScope
		$rootScope.noteID = id;
		//Emit the sys_id as selectNote for anyone listening for selectNote to receive
		$rootScope.$emit('selectNote', id);
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_list</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Notes List</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /*
	Create the notes property on the data object which will contain an array of objects
	Query the database to find all Note table records for the currently logged in user
	Sort the records by descending order based on the sys_created_on date field value
	For each of the Note records returned
	Create an empty object, noteObj
	Get the display values for the number, title, and sys_id fields and put those values into the noteObj object
	Get the first 20 characters of the description field and add that value to the noteObj object
	Push the noteObj into the notes array
	*/
	
	//create an array to populate with notes
	data.notes = [];
	var grNote = new GlideRecord('x_snc_createnotes_note');
	grNote.addQuery('user', gs.getUser().getID());
	grNote.orderByDesc('sys_created_on');
	grNote.query();
	
	while (grNote.next()) {
		var noteObj = {};
		//use service pportal helper method to get some display values
		$sp.getRecordDisplayValues(noteObj, grNote, 'number,title,sys_id');
		//get the first 20 characters of the description
		noteObj.note = grNote.getValue('note').slice(0,20);
		//push the populated obj into the array
		data.notes.push(noteObj);
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-14 18:42:50</sys_created_on>
        <sys_id>592451362fc4b8109a34877cf699b67d</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>Notes List</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_592451362fc4b8109a34877cf699b67d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-05-14 19:56:58</sys_updated_on>
        <template><![CDATA[<div class = 'panel panel-default'>
  <div class = 'panel-heading clearfix'>
    <h3 class = 'panel-title pull-left'>
      ${Notes}
    </h3>
  </div>
  <!--
  Original iteration of the widget
  <div class = 'panel-body'>
    <p>
    	Notes list widget
    </p>
  </div>
  -->
  <div class = 'list-group'>
    <!--
		ng-repeat will iterate through the onjects in the data.notes array
		ng-click will allow an action to occur when the user clicks a Note in the list
		-->
    <a class = 'list-group-item' ng-click = 'c.selectItem($index)' ng-repeat = 'note in data.notes'>
      <h4 class = 'list-group-item-heading'>
        {{note.title}}
      </h4>
      <p class = 'list-group-item-text'>
        {{note.note}}
      </p>
    </a>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
